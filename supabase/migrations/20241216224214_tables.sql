CREATE TABLE profiles (
	id UUID PRIMARY KEY,
	first_name VARCHAR,
	last_name VARCHAR,
	FOREIGN key (id) REFERENCES auth.users (id) ON DELETE cascade ON UPDATE cascade
);


CREATE TABLE profile_pictures (
	profile_id UUID PRIMARY KEY,
	image VARCHAR NOT NULL,
	FOREIGN key (profile_id) REFERENCES profiles (id) ON DELETE cascade ON UPDATE cascade
);


CREATE TABLE business (
	id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	name VARCHAR NOT NULL,
	description TEXT,
	location POINT,
	owner_id UUID NOT NULL,
	phone VARCHAR,
	FOREIGN key (owner_id) REFERENCES profiles (id) ON DELETE cascade ON UPDATE cascade
);


CREATE TABLE business_images (
	id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	business_id INTEGER NOT NULL,
	image VARCHAR NOT NULL,
	FOREIGN key (business_id) REFERENCES business (id) ON DELETE cascade ON UPDATE cascade
);


CREATE TABLE products (
	id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	name VARCHAR NOT NULL,
	price NUMERIC(12, 2) NOT NULL CHECK (price >= 0),
	description TEXT,
	business_id INT NOT NULL,
	FOREIGN key (business_id) REFERENCES public.business (id) ON DELETE cascade ON UPDATE cascade
);


CREATE TABLE product_images (
	id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	image VARCHAR NOT NULL,
	product_id INT NOT NULL,
	FOREIGN key (product_id) REFERENCES public.products (id) ON DELETE cascade ON UPDATE cascade
);


CREATE TABLE reviews (
	id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	rating NUMERIC(3, 2) CHECK (
		rating >= 0
		AND rating <= 5
	) NOT NULL,
	comment TEXT,
	author_id UUID NOT NULL,
	business_id INT NOT NULL,
	FOREIGN key (author_id) REFERENCES public.profiles (id) ON DELETE cascade ON UPDATE cascade,
	FOREIGN key (business_id) REFERENCES public.business (id) ON DELETE cascade ON UPDATE cascade,
	UNIQUE (author_id, business_id)
);


-- inserts a row into public.profiles
CREATE FUNCTION public.handle_new_user () returns trigger language plpgsql security definer
SET
	search_path = '' AS $$
begin
  insert into public.profiles (id, first_name, last_name)
  values (new.id, new.raw_user_meta_data ->> 'first_name', new.raw_user_meta_data ->> 'last_name');

  return new;
end;
$$;


-- trigger the function every time a user is created
CREATE TRIGGER on_auth_user_created
AFTER insert ON auth.users FOR each ROW
EXECUTE procedure public.handle_new_user ();
